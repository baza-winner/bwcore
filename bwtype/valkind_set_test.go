// Code generated by "bwsetter -type=ValKind"; DO NOT EDIT; bwsetter: go get -type=ValKind -test%!(EXTRA string=github.com/baza-winner/bwcore/bwsetter)

package bwtype

import (
	"encoding/json"
	bwtesting "github.com/baza-winner/bwcore/bwtesting"
	"testing"
)

func TestValKindSet(t *testing.T) {
	bwtesting.BwRunTests(t, ValKindSetFrom, map[string]bwtesting.Case{"ValKindSetFrom": {
		In: []interface{}{_ValKindSetTestItemA, _ValKindSetTestItemB},
		Out: []interface{}{ValKindSet{
			_ValKindSetTestItemA: struct{}{},
			_ValKindSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, ValKindSetFromSlice, map[string]bwtesting.Case{"ValKindSetFromSlice": {
		In: []interface{}{[]ValKind{_ValKindSetTestItemA, _ValKindSetTestItemB}},
		Out: []interface{}{ValKindSet{
			_ValKindSetTestItemA: struct{}{},
			_ValKindSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, ValKindSetFromSet, map[string]bwtesting.Case{"ValKindSetFromSet": {
		In: []interface{}{ValKindSet{
			_ValKindSetTestItemA: struct{}{},
			_ValKindSetTestItemB: struct{}{},
		}},
		Out: []interface{}{ValKindSet{
			_ValKindSetTestItemA: struct{}{},
			_ValKindSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, ValKindSet.Copy, map[string]bwtesting.Case{"ValKindSet.Copy": {
		In: []interface{}{ValKindSet{
			_ValKindSetTestItemA: struct{}{},
			_ValKindSetTestItemB: struct{}{},
		}},
		Out: []interface{}{ValKindSet{
			_ValKindSetTestItemA: struct{}{},
			_ValKindSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, ValKindSet.ToSlice, map[string]bwtesting.Case{"ValKindSet.ToSlice": {
		In:  []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}},
		Out: []interface{}{[]ValKind{_ValKindSetTestItemA}},
	}})
	bwtesting.BwRunTests(t, _ValKindSetToSliceTestHelper, map[string]bwtesting.Case{"_ValKindSetToSliceTestHelper": {
		In:  []interface{}{[]ValKind{_ValKindSetTestItemB, _ValKindSetTestItemA}},
		Out: []interface{}{[]ValKind{_ValKindSetTestItemA, _ValKindSetTestItemB}},
	}})
	bwtesting.BwRunTests(t, ValKindSet.String, map[string]bwtesting.Case{"ValKindSet.String": {
		In: []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}},
		Out: []interface{}{func() string {
			result, _ := json.Marshal(_ValKindSetTestItemA)
			return "[" + string(result) + "]"
		}()},
	}})
	bwtesting.BwRunTests(t, ValKindSet.MarshalJSON, map[string]bwtesting.Case{"ValKindSet.MarshalJSON": {
		In: []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}},
		Out: []interface{}{(func() []byte {
			result, _ := json.Marshal([]interface{}{_ValKindSetTestItemA})
			return result
		})(), nil},
	}})
	bwtesting.BwRunTests(t, ValKindSet.ToSliceOfStrings, map[string]bwtesting.Case{"ValKindSet.ToSliceOfStrings": {
		In:  []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}},
		Out: []interface{}{[]string{_ValKindSetTestItemA.String()}},
	}})
	bwtesting.BwRunTests(t, ValKindSet.Has, map[string]bwtesting.Case{
		"ValKindSet.Has: false": {
			In:  []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}, _ValKindSetTestItemB},
			Out: []interface{}{false},
		},
		"ValKindSet.Has: true": {
			In:  []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}, _ValKindSetTestItemA},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, ValKindSet.HasAny, map[string]bwtesting.Case{
		"ValKindSet.HasAny: empty": {
			In:  []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}},
			Out: []interface{}{false},
		},
		"ValKindSet.HasAny: false": {
			In:  []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}, _ValKindSetTestItemB},
			Out: []interface{}{false},
		},
		"ValKindSet.HasAny: true": {
			In:  []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}, _ValKindSetTestItemA, _ValKindSetTestItemB},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, ValKindSet.HasAnyOfSlice, map[string]bwtesting.Case{
		"ValKindSet.HasAnyOfSlice: empty": {
			In:  []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}, []ValKind{}},
			Out: []interface{}{false},
		},
		"ValKindSet.HasAnyOfSlice: false": {
			In:  []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}, []ValKind{_ValKindSetTestItemB}},
			Out: []interface{}{false},
		},
		"ValKindSet.HasAnyOfSlice: true": {
			In:  []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}, []ValKind{_ValKindSetTestItemA, _ValKindSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, ValKindSet.HasAnyOfSet, map[string]bwtesting.Case{
		"ValKindSet.HasAnyOfSet: empty": {
			In:  []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}, ValKindSet{}},
			Out: []interface{}{false},
		},
		"ValKindSet.HasAnyOfSet: false": {
			In:  []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}, ValKindSet{_ValKindSetTestItemB: struct{}{}}},
			Out: []interface{}{false},
		},
		"ValKindSet.HasAnyOfSet: true": {
			In: []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}, ValKindSet{
				_ValKindSetTestItemA: struct{}{},
				_ValKindSetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, ValKindSet.HasEach, map[string]bwtesting.Case{
		"ValKindSet.HasEach: empty": {
			In:  []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}},
			Out: []interface{}{true},
		},
		"ValKindSet.HasEach: false": {
			In:  []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}, _ValKindSetTestItemA, _ValKindSetTestItemB},
			Out: []interface{}{false},
		},
		"ValKindSet.HasEach: true": {
			In: []interface{}{ValKindSet{
				_ValKindSetTestItemA: struct{}{},
				_ValKindSetTestItemB: struct{}{},
			}, _ValKindSetTestItemA, _ValKindSetTestItemB},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, ValKindSet.HasEachOfSlice, map[string]bwtesting.Case{
		"ValKindSet.HasEachOfSlice: empty": {
			In:  []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}, []ValKind{}},
			Out: []interface{}{true},
		},
		"ValKindSet.HasEachOfSlice: false": {
			In:  []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}, []ValKind{_ValKindSetTestItemA, _ValKindSetTestItemB}},
			Out: []interface{}{false},
		},
		"ValKindSet.HasEachOfSlice: true": {
			In: []interface{}{ValKindSet{
				_ValKindSetTestItemA: struct{}{},
				_ValKindSetTestItemB: struct{}{},
			}, []ValKind{_ValKindSetTestItemA, _ValKindSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, ValKindSet.HasEachOfSet, map[string]bwtesting.Case{
		"ValKindSet.HasEachOfSet: empty": {
			In:  []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}, ValKindSet{}},
			Out: []interface{}{true},
		},
		"ValKindSet.HasEachOfSet: false": {
			In: []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}, ValKindSet{
				_ValKindSetTestItemA: struct{}{},
				_ValKindSetTestItemB: struct{}{},
			}},
			Out: []interface{}{false},
		},
		"ValKindSet.HasEachOfSet: true": {
			In: []interface{}{ValKindSet{
				_ValKindSetTestItemA: struct{}{},
				_ValKindSetTestItemB: struct{}{},
			}, ValKindSet{
				_ValKindSetTestItemA: struct{}{},
				_ValKindSetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, ValKindSet._AddTestHelper, map[string]bwtesting.Case{"ValKindSet.Add": {
		In: []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}, _ValKindSetTestItemB},
		Out: []interface{}{ValKindSet{
			_ValKindSetTestItemA: struct{}{},
			_ValKindSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, ValKindSet._AddSliceTestHelper, map[string]bwtesting.Case{"ValKindSet.AddSlice": {
		In: []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}, []ValKind{_ValKindSetTestItemB}},
		Out: []interface{}{ValKindSet{
			_ValKindSetTestItemA: struct{}{},
			_ValKindSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, ValKindSet._AddSetTestHelper, map[string]bwtesting.Case{"ValKindSet.AddSet": {
		In: []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}, ValKindSet{_ValKindSetTestItemB: struct{}{}}},
		Out: []interface{}{ValKindSet{
			_ValKindSetTestItemA: struct{}{},
			_ValKindSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, ValKindSet._DelTestHelper, map[string]bwtesting.Case{"ValKindSet.Del": {
		In: []interface{}{ValKindSet{
			_ValKindSetTestItemA: struct{}{},
			_ValKindSetTestItemB: struct{}{},
		}, _ValKindSetTestItemB},
		Out: []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, ValKindSet._DelSliceTestHelper, map[string]bwtesting.Case{"ValKindSet.DelSlice": {
		In: []interface{}{ValKindSet{
			_ValKindSetTestItemA: struct{}{},
			_ValKindSetTestItemB: struct{}{},
		}, []ValKind{_ValKindSetTestItemB}},
		Out: []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, ValKindSet._DelSetTestHelper, map[string]bwtesting.Case{"ValKindSet.DelSet": {
		In: []interface{}{ValKindSet{
			_ValKindSetTestItemA: struct{}{},
			_ValKindSetTestItemB: struct{}{},
		}, ValKindSet{_ValKindSetTestItemB: struct{}{}}},
		Out: []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, ValKindSet.Union, map[string]bwtesting.Case{"ValKindSet.Union": {
		In: []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}, ValKindSet{_ValKindSetTestItemB: struct{}{}}},
		Out: []interface{}{ValKindSet{
			_ValKindSetTestItemA: struct{}{},
			_ValKindSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, ValKindSet.Intersect, map[string]bwtesting.Case{"ValKindSet.Intersect": {
		In: []interface{}{ValKindSet{
			_ValKindSetTestItemA: struct{}{},
			_ValKindSetTestItemB: struct{}{},
		}, ValKindSet{_ValKindSetTestItemB: struct{}{}}},
		Out: []interface{}{ValKindSet{_ValKindSetTestItemB: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, ValKindSet.Subtract, map[string]bwtesting.Case{"ValKindSet.Subtract": {
		In: []interface{}{ValKindSet{
			_ValKindSetTestItemA: struct{}{},
			_ValKindSetTestItemB: struct{}{},
		}, ValKindSet{_ValKindSetTestItemB: struct{}{}}},
		Out: []interface{}{ValKindSet{_ValKindSetTestItemA: struct{}{}}},
	}})
}

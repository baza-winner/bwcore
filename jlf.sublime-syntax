%YAML 1.2
---
name: JLF
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions: [ jlf ]
scope: source.jlf

variables:
  space: '[\s]+'
  beginOfSingleLineComment: '//'
  beginOfMultiLineComment: '/\*'
  endOfMultiLineComment: '\*/'

  any: '(?=.)'

  number: '[\+\-]?\d+(?:\.\d+)?'
  id: '[a-zA-Z_]([a-zA-Z_\d\.-]*)'
  bool: true|false
  nil: nil

  keySeparator: '(\s[=-]>|\s=|:)?(\s|$)'
  commaSeparatorOptional: ','

  beginOfMap: '\{'
  endOfMap: '\}'

  beginOfArray: '\['
  endOfArray: '\]'

  beginOfVarDefBlock: '\('
  endOfVarDefBlock: '\)'
  beginOfExpr: '\('
  endOfExpr: '\)'
  beginOfStringSubExpr: '<'
  endOfStringSubExpr: '>'

  beginOfArgsMap: '\{'
  endOfArgsMap: '\}'

  beginOfArgsArray: '\{'
  endOfArgsArray: '\}'

  beginOfIterator: '\['
  endOfIterator: '\]'

  quotedStringDelimiter: '"'
  regexpStringDelimiter: '/'

  escapeStarter: '\\'
  varStarter: '\$'
  fileSpecStarter: '%'
  defStarter: '\bDef\b'
  genStarter: \bGen\b
  colon: ':'
  chainSegmentSpecStarter: '[^^\s\(\|\*%]'

  int: '[-+]?\d+'

  pathSegmentSeparator: '\|'
  rangeSeparator: '\.\.'
  negationMark: '!'

  ternaryIf: '\?'
  ternaryDelimiter: ':'

  spaceAfter: '(\s|$)'
  sumOps: '[\+\-]'
  mulOps: '[\*\/]'
  andOp: '(\&\&)'
  orOp: '(\|\|)'
  cmpOps: '(==|!=|<=|>=)'
  matchOp: '(=~)'

  keysDef: \bKeysDef\b
  defTypeSingleSimple: \bAny|Null|Nil\b
  genType: \bArray|{{keysDef}}|Map|String|Int|Number|Bool|Range|Def|Gen\b
  defTypeSingleComplex: \b{{genType}}|Func\b
  defTypeSingle: '{{defTypeSingleComplex}}|{{keysDef}}|{{defTypeSingleSimple}}'
  defTypeMulti: '\bArrayOf|AnyBut\b'
  spreadOp: '(\.\.\.)'

  optionalEnder: '\?'
  mustEnder: '!'
  pathDefaultValueStarter: ':'
  beginOfNonQuotedKey: '(?=[^{{beginOfMap}}{{endOfMap}}{{beginOfArray}}{{endOfArray}}{{commaSeparatorOptional}}])(?!{{endOfNonQuotedKey}})'
  endOfNonQuotedKey: '{{space}}|{{optionalEnder}}|{{beginOfExpr}}|{{endOfExpr}}|{{beginOfMap}}|{{beginOfArray}}|{{endOfArray}}|{{keySeparator}}'
  beginOfNonQuotedString: '(?=[\\a-zA-Z_\.])'
  endOfNonQuotedString: '{{space}}|{{optionalEnder}}|{{beginOfExpr}}|{{endOfExpr}}|{{endOfStringSubExpr}}|{{pathSegmentSeparator}}|{{beginOfMap}}|{{beginOfArray}}|{{endOfMap}}|{{endOfArray}}|{{commaSeparatorOptional}}|{{defStarter}}|{{spreadOp}}'
  jsonQuotedEscapeRunes: '[bfnrt]'
  jsonQuotedEscapeRunesAsIs: '["\\/]'
  escapeRunes: '[abfnrtv]'
  nonQuotedKeyBegin: '[^{{beginOfMap}}{{endOfMap}}{{beginOfArray}}{{endOfArray}}{{commaSeparatorOptional}}]'
  doubleQuotedValidRune: '\x{0020}-\x{10ffff}'

# =============================================================================
# =============================================================================

contexts:

  prototype:
    - include: spaceInclude

  spaceInclude:
    - meta_include_prototype: false
    - match: '{{space}}'
    - match: '{{beginOfSingleLineComment}}'
      scope: punctuation.definition.comment.jlf
      push:
        - meta_include_prototype: false
        - meta_scope: comment.line.jlf
        - match: $
          pop: true
    - match: '{{beginOfMultiLineComment}}'
      scope: punctuation.definition.comment.begin.jlf
      push:
        - meta_include_prototype: false
        - meta_scope: comment
        - match: '{{endOfMultiLineComment}}'
          scope: punctuation.definition.comment.end.jlf
          pop: true

  illegalInclude:
    - meta_include_prototype: false
    - match: .
      scope: invalid.illegal.jlf

# =============================================================================

  varDefInclude:
    - match: '({{varStarter}})({{defStarter}})'
      captures:
        1: keyword.jlf
        2: variable.parameter.jlf
      push: [defValue, keySeparatorOptional]
    - match: '({{varStarter}})'
      scope: keyword.jlf
      push: [value, keySeparatorOptional, varDefArgsOptional, varName]

  main:
    - match: '{{any}}'
      set: [mainTail, mainArgsOptional]

  mainArgsOptional:
    - match: '({{varStarter}})(?={{beginOfArgsMap}})'
      scope: keyword.jlf
      set: varDefArgsOptional
    - match: '{{any}}'
      pop: true

  mainTail:
    - include: varDefInclude
    - match: '{{any}}'
      set: [end, value]

  end:
    - include: varDefInclude
    - include: illegalInclude

# =============================================================================

  varDefArgsOptional:
    - meta_include_prototype: false
    - include: varDefArgsInclude
    - match: '{{any}}'
      pop: true

  varDefArgsInclude:
    - match: '{{beginOfArgsMap}}'
      scope: punctuation.section.parens.begin.jlf
      set:
      - match: '{{endOfArgsMap}}'
        scope: punctuation.section.block.end.jlf
        pop: true
      - match: '{{any}}'
        push: varDefArgName
        # push: [ commaSeparatorOptional, defValue, keySeparatorOptional, optionalKeyEnder, argName]

  varDefArgName:
    - match: '(?={{beginOfNonQuotedString}}|{{quotedStringDelimiter}}|{{regexpStringDelimiter}}|{{beginOfArray}})'
      set: [defValue, keySeparatorOptional, optionalKeyEnder, varDefArgNameItem]
    - match: '(?={{varStarter}}|{{beginOfExpr}})'
      set: [keysDefSpreadOptional, commonValue]
    - include: illegalInclude

  varDefArgsValue:
    - include: commonValueInclude
    - include: varDefArgsInclude
    - include: illegalInclude


  argNameAtomInclude:
    - include: regexpInclude
    - include: argNameInclude

  argNameInclude:
    - match: '{{quotedStringDelimiter}}'
      scope: punctuation.definition.string.begin.jlf
      set:
        - meta_include_prototype: false
        - meta_scope: entity.name.variable.jlf
        - include: quotedInclude
    - match: '{{beginOfNonQuotedKey}}'
      set:
        - meta_include_prototype: false
        - meta_scope: entity.name.variable.jlf
        - match: '(?={{endOfNonQuotedKey}})'
          pop: true
        - match: '(\\){{endOfNonQuotedKey}}'
          captures:
            1: constant.character.escape.jlf
        - include: escapeInclude

  argName:
    - include: argNameInclude
    - include: illegalInclude

  argNameAtom:
    - include: argNameAtomInclude
    - include: illegalInclude

  varDefArgNameItem:
    - match: '{{beginOfArray}}'
      scope: punctuation.section.block.begin.jlf
      set:
        - match: '{{endOfArray}}'
          scope: punctuation.section.block.end.jlf
          pop: true
        - match: '{{any}}'
          push: [ commaSeparatorOptional, argNameAtom ]
    - include: argNameAtomInclude
    - include: illegalInclude

# =============================================================================

  genValue:
    - include: commonValueInclude
    - match: '{{any}}'
      set: [gen, genStarterOptional]

  genStarterOptional:
    - match: '({{genStarter}})(?:({{colon}})(?=({{genType}})))?'
      scope: comment.jlf
      pop: true
    - match: '{{any}}'
      pop: true

  genInclude:
    - meta_include_prototype: false
    - match: '({{genStarter}})(?:({{colon}})(?=({{genType}})))?'
      scope: keyword.jlf
      set: gen

  gen:
    - meta_include_prototype: false
    - match: '\bMap\b'
      scope: variable.parameter.jlf
      set:
        - meta_include_prototype: false
        - match: '({{beginOfMap}})'
          set: [mapEnd, value, keySeparatorOptional, stringValue]
        - include: illegalInclude
    - match: '({{genType}})?'
      scope: variable.parameter.jlf
      set:
        - meta_include_prototype: false
        - match: '({{beginOfMap}})'
          set:
            - match: '{{endOfMap}}'
              scope: punctuation.section.block.end.jlf
              pop: true
            - match: \btype\b
              scope: keyword.jlf
              push: [commaSeparatorOptional, genType, keySeparatorOptional]
            - match: \bkey\b
              scope: keyword.jlf
              push: [commaSeparatorOptional, stringValue, keySeparatorOptional]
            - match: \bvalue\b
              scope: keyword.jlf
              push: [commaSeparatorOptional, value, keySeparatorOptional]
            - match: \belem\b
              scope: keyword.jlf
              push: [commaSeparatorOptional, gen, keySeparatorOptional]
            - include: illegalInclude
        - include: illegalInclude
    - include: illegalInclude

  genType:
    - match: \b{{defTypeSingle}}\b
      scope: variable.parameter.jlf
      pop: true

# =============================================================================

  iteratorNegationOptional:
    - meta_include_prototype: false
    - match: '{{negationMark}}'
      scope: keyword.jlf
      pop: true
    - match: '{{any}}'
      pop: true

  iteratorConditionOptional:
    - match: '{{int}}'
      scope: constant.numeric.jlf
      set: rangeTailOptinal
    - match: '{{beginOfExpr}}'
      scope: punctuation.section.parens.begin.jlf
      set: [rangeTailOptinal, exprEnd, expr]
    - include: stringInclude
    - match: '{{any}}'
      pop: true

  iteratorEnd:
    - meta_include_prototype: false
    - match: '{{endOfIterator}}'
      scope: punctuation.section.bracket.begin.jlf
      set:
        - meta_include_prototype: false
        - match: '{{beginOfIterator}}'
          scope: punctuation.section.bracket.begin.jlf
          set: [iteratorEnd, iteratorConditionOptional, iteratorNegationOptional]
        - match: '{{any}}'
          set: genValue
    - include: illegalInclude

# =============================================================================

  varSpecChainInclude:
    - meta_include_prototype: false
    - match: '(?={{varStarter}})'
      set: [chainNextSegmentOptional, varSpec]

  varSpecChain:
    - include: varSpecChainInclude
    - include: illegalInclude

  chainNextSegmentOptional:
    # - meta_include_prototype: false
    - match: '{{pathSegmentSeparator}}'
      scope: keyword.jlf
      push: chainSegmentSpec
    - match: '{{any}}'
      pop: true

  varSpec:
    - meta_include_prototype: false
    - include: varSpecInclude

  chainSegmentSpec:
    - match: '(?={{defStarter}})'
      set: [chainNextSegmentOptional, defWithStarter]
    - match: '{{beginOfIterator}}'
      scope: punctuation.section.bracket.begin.jlf
      set: [chainNextSegmentOptional, iteratorEnd, iteratorConditionOptional, iteratorNegationOptional]
    - include: intInclude
    - include: exprInclude
    - include: varSpecInclude
    - match: '{{optionalEnder}}|{{mustEnder}}'
      scope: entity.name.label.jlf
      pop: true
    - match: '{{quotedStringDelimiter}}'
      scope: punctuation.definition.string.begin.jlf
      set:
        - meta_include_prototype: false
        - meta_scope: support.function.jlf
        - include: quotedInclude
    - match: '{{chainSegmentSpecStarter}}'
      set:
        - meta_include_prototype: false
        - meta_scope: support.function.jlf
        - include: nonQuotedStringTailInclude
    - include: illegalInclude

# =============================================================================

  varSpecInclude:
    - meta_include_prototype: false
    - match: '({{varStarter}})'
      scope: keyword.jlf
      set: [varArgsOptional, varName]

  varChainInclude:
    - meta_include_prototype: false
    - match: '({{varStarter}})'
      scope: keyword.jlf
      set: [chainNextSegmentOptional, varArgsOptional, varName]

  varName:
    - meta_include_prototype: false
    - match: '(_|Key|Idx|ElemOf|Len|File|Ref|\.\.|\.)(?={{endOfNonQuotedString}})'
      scope: entity.name.label.jlf
      pop: true
    - match: '(?={{endOfNonQuotedString}})'
      set: illegalInclude
    - match: '{{any}}'
      set:
        - meta_include_prototype: false
        - clear_scopes: true
        - meta_scope: entity.name.variable.jlf
        - include: nonQuotedStringTailInclude

  varArgsOptional:
    - meta_include_prototype: false
    - match: '{{beginOfMap}}'
      scope: punctuation.section.block.begin.jlf
      set:
        - match: '{{endOfMap}}'
          scope: punctuation.section.block.end.jlf
          pop: true
        - match: '{{any}}'
          push: [commaSeparatorOptional, value, keySeparatorOptional, argName]
    - include: arrayInclude
    - include: exprInclude
    - match: '{{any}}'
      pop: true

  specInclude:
    - meta_include_prototype: false
    - include: varSpecArgsInclude
    - include: nonQuotedStringTailInclude

# =============================================================================

  exprInclude:
    - meta_include_prototype: false
    - match: '{{beginOfExpr}}'
      scope: punctuation.section.parens.begin.jlf
      set: [exprEnd,  exprContent]

  exprContent:
    - match: '{{negationMark}}'
      set: [exprTernaryBeginOptional, boolExprTailOptional, valueChain]
    - match: '{{any}}'
      set: [exprTernaryBeginOptional, exprTailOptional, valueChain]

  negationMarkOptional:
    - meta_include_prototype: false
    - match: '{{negationMark}}'
      pop: true
    - match: '{{any}}'
      pop: true

  exprEnd:
    - match: '{{endOfExpr}}'
      scope: punctuation.section.parens.end.jlf
      pop: true
    - include: illegalInclude

  expr:
    - include: exprInclude
    - include: illegalInclude

  exprSumTailInclude:
    - match: '{{sumOps}}{{spaceAfter}}'
      set: [ exprSumTailOptional, valueChain ]

  exprSumTailOptional:
    - include: exprSumTailInclude
    - match: '{{any}}'
      pop: true

  exprMulTailInclude:
    - match: '{{mulOps}}{{spaceAfter}}'
      set: [ exprMulTailOptional, valueChain ]

  exprMulTailOptional:
    - include: exprMulTailInclude
    - match: '{{any}}'
      pop: true

  exprOrTailInclude:
    - match: '{{orOp}}{{spaceAfter}}'
      set: [ exprOrTailOptional, valueChain, negationMarkOptional]

  exprOrTailOptional:
    - include: exprOrTailInclude
    - match: '{{any}}'
      pop: true

  exprAndTailInclude:
    - match: '{{andOp}}{{spaceAfter}}'
      set: [ exprAndTailOptional, valueChain, negationMarkOptional]

  exprAndTailOptional:
    - include: exprAndTailInclude
    - match: '{{any}}'
      pop: true

  boolExprTailInclude:
    - include: exprOrTailInclude
    - include: exprAndTailInclude

  boolExprTailOptional:
    - include: boolExprTailInclude
    - match: '{{any}}'
      pop: true

  exprTailOptional:
    - include: exprSumTailInclude
    - include: exprMulTailInclude
    - match: '{{cmpOps}}{{spaceAfter}}'
      scope: keyword.operator.logical.jlf
      set: valueChain
    - match: '{{matchOp}}{{spaceAfter}}'
      scope: keyword.operator.logical.jlf
      set: mathOpRhs
    - include: boolExprTailInclude
    - match: '{{any}}'
      pop: true

  mathOpRhs:
    - include: defInclude
    - include: regexpInclude
    - include: commonValueInclude
    - include: illegalInclude

  exprTernaryBeginOptional:
    - match: '{{ternaryIf}}{{ternaryDelimiter}}'
      scope: keyword.jlf
      push: valueWithoutTernary
    - match: '{{ternaryIf}}'
      scope: keyword.jlf
      push: [valueWithoutTernary, exprTernaryDelimiter, valueWithoutTernary]
    - match: '{{any}}'
      pop: true

  exprTernaryIf:
    - match: '{{ternaryIf}}'
      scope: keyword.jlf
      pop: true
    - include: illegalInclude

  exprTernaryDelimiter:
    - match: '{{ternaryDelimiter}}'
      pop: true
    - include: illegalInclude

# =============================================================================

  intInclude:
    - match: '{{int}}'
      scope: constant.numeric.jlf
      pop: true

# =============================================================================

  escapeInclude:
    - meta_include_prototype: false
    - match: '(?=\\$)'
      set:
        - include: illegalInclude
    - match: '\\{{escapeRunes}}'
      scope: constant.character.escape.jlf
    - match: '\\"'
      scope: constant.character.escape.jlf
      push:
        - match: '"'
          scope: constant.character.escape.jlf
          pop: true
    - match: '(\\).'
      captures:
        1: comment.jlf

  stringSubExprInclude:
    - meta_include_prototype: false
    - match: '({{escapeStarter}})({{beginOfStringSubExpr}})'
      scope: keyword.jlf
      push: [stringSubExprEnd, exprContent]

  nonQuotedStringTailInclude:
    - meta_include_prototype: false
    - include: stringSubExprInclude
    - match: '(?={{endOfNonQuotedString}})'
      pop: true
    - match: '({{escapeStarter}}){{endOfNonQuotedString}}'
      captures:
        1: constant.character.escape.jlf
    - include: escapeInclude

  stringSubExprEnd:
    - match: '{{endOfStringSubExpr}}'
      scope: keyword.jlf
      pop: true
    - include: illegalInclude

  stringHelperInclude:
    - match: '{{escapeStarter}}u'
      push:
        - meta_scope: constant.character.escape.jlf
        - match: '[0-9a-fA-F]{4}'
          pop: true
        - include: illegalInclude
    - match: '{{escapeStarter}}{{jsonQuotedEscapeRunes}}'
      scope: constant.character.escape.jlf
    - match: '({{escapeStarter}})({{jsonQuotedEscapeRunesAsIs}})'
      captures:
        1: constant.character.escape.jlf
    - match: '({{escapeStarter}})([{{doubleQuotedValidRune}}])'
      captures:
        1: comment.jlf

  quotedInclude:
    - meta_include_prototype: false
    - include: stringHelperInclude
    - match: '{{quotedStringDelimiter}}'
      scope: punctuation.definition.string.end.jlf
      pop: true
    - match: '(?={{escapeStarter}}|[^{{doubleQuotedValidRune}}])'
      set:
        - include: illegalInclude

  quotedStringInclude:
    - meta_include_prototype: false
    - match: '{{quotedStringDelimiter}}'
      scope: punctuation.definition.string.begin.jlf
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.jlf
        - include: stringSubExprInclude
        - include: quotedInclude

# =============================================================================

  valueHelperInclude:
    - match: '{{number}}'
      scope: constant.numeric.jlf
      set: rangeTailOptinal
    - match: '(?={{beginOfExpr}})'
      set: [rangeTailOptinal, expr]
    - include: mapInclude
    - include: defInclude
    - include: keysDefInclude
    - include: genInclude
    - include: arrayInclude
    - include: boolInclude
    - include: nilInclude
    - include: regexpInclude
    - include: stringInclude

  valueChainStart:
    - include: varSpecInclude
    - include: valueHelperInclude
    - include: illegalInclude

  valueChain:
    - match: '{{any}}'
      set: [chainNextSegmentOptional, valueChainStart]

  valueWithoutTernary:
    - match: '{{negationMark}}'
      set: [boolExprTailOptional, valueChain]
    - match: '{{any}}'
      set: [exprTailOptional, valueChain]

  value:
    - include: varChainInclude
    - include: valueHelperInclude
    - include: illegalInclude

# =====================================

  regexpHelperInclude:
    - include: stringSubExprInclude
    - include: stringHelperInclude
    - match: '\.'
      scope: keyword.jlf
    - match: '\[\['
      scope: keyword.jlf
      set: [asciiCharsetClassEnd, colon, asciiCharsetClass, charsetNegationOptional, colon]
    - match: '\['
      scope: keyword.jlf
      push:
        - match: '\]'
          scope: keyword.jlf
          pop: true
        - match: '\\[dD]'
          scope: keyword.jlf
        - match: '\\p(\w)'
          captures:
            1: keyword.jlf
            2: entity.name.variable.jlf
    - match: '[?+*]'
      scope: keyword.jlf
    - match: '({{regexpStringDelimiter}})([igm]*)'
      scope: keyword.jlf
      pop: true

  regexpInclude:
    - meta_include_prototype: false
    - match: '{{regexpStringDelimiter}}'
      scope: keyword.jlf
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.jlf
        - include: regexpHelperInclude

  keyRegexpInclude:
    - meta_include_prototype: false
    - match: '{{regexpStringDelimiter}}'
      scope: keyword.jlf
      set:
        - meta_include_prototype: false
        - meta_scope: support.function.jlf
        - include: regexpHelperInclude

  colon:
    - meta_include_prototype: false
    - match: '{{colon}}'
      scope: punctuation.delimiter.jlf
      pop: true
    - match: illegalInclude

  charsetNegationOptional:
    - meta_include_prototype: false
    - match: '^'
      scope: keyword.jlf
      pop: true
    - match: '{{any}}'
      pop: true

  asciiCharsetClass:
    - meta_include_prototype: false
    - match: '\balpha\b'
      scope: entity.name.variable.jlf
      pop: true
    - include: illegalInclude

  asciiCharsetClassEnd:
    - meta_include_prototype: false
    - match: ']]'
      scope: keyword.jlf
      pop: true
    - include: illegalInclude




# =====================================

  stringInclude:
    - meta_include_prototype: false
    - include: quotedStringInclude
    - match: '{{beginOfNonQuotedString}}'
      set:
        - meta_include_prototype: false
        - meta_scope: string.jlf
        - include: nonQuotedStringTailInclude

  stringValue:
    - include: commonValueInclude
    - include: stringInclude
    - include: illegalInclude

# =====================================

  mapEnd:
    - include: mapEndInclude
    - include: illegalInclude

  mapEndInclude:
    - match: '{{endOfMap}}'
      scope: punctuation.section.block.end.jlf
      pop: true

  mapInclude:
    - meta_include_prototype: false
    - match: '{{beginOfMap}}'
      scope: punctuation.section.block.begin.jlf
      set:
        - include: mapEndInclude
        - match: '(?={{varStarter}})'
          push: [commaSeparatorOptional, optionalSpreadOptional, varSpec]
        - match: '(?={{beginOfExpr}})'
          push: [commaSeparatorOptional, optionalSpreadOptional, expr]
        - match: '{{any}}'
          push: [commaSeparatorOptional, value, keySeparatorOptional, optionalKeyEnder, key]

  spreadOptional:
    - meta_include_prototype: false
    - match: '\.\.\.'
      scope: keyword.jlf
      pop: true
    - match: '{{any}}'
      pop: true

  optionalSpreadOptional:
    - meta_include_prototype: false
    - match: '\.\.\.'
      scope: comment.jlf
      pop: true
    - match: '{{any}}'
      pop: true

  keyInclude:
    - match: '{{quotedStringDelimiter}}'
      scope: punctuation.definition.string.begin.jlf
      set:
        - meta_include_prototype: false
        - meta_scope: support.function.jlf
        - include: quotedInclude
    - match: '{{beginOfNonQuotedKey}}'
      set:
        - meta_include_prototype: false
        - meta_scope: support.function.jlf
        - include: stringSubExprInclude
        - match: '(?={{endOfNonQuotedKey}})'
          pop: true
        - match: '(\\){{endOfNonQuotedKey}}'
          captures:
            1: constant.character.escape.jlf
        - include: escapeInclude

  keyValue:
    - include: keyInclude
    - include: illegalInclude

  key:
    - include: keyInclude
    - include: illegalInclude

  keySeparatorOptional:
    - meta_include_prototype: false
    - match: '{{keySeparator}}'
      scope: comment.jlf
      pop: true
    - match: '{{any}}'
      pop: true

  commaSeparatorOptional:
    - match: '{{commaSeparatorOptional}}'
      scope: comment.jlf
      pop: true
    - match: '{{any}}'
      pop: true

# =====================================

  arrayInclude:
    - meta_include_prototype: false
    - match: '{{beginOfArray}}'
      scope: punctuation.section.block.begin.jlf
      set:
        - match: '{{endOfArray}}'
          scope: punctuation.section.block.end.jlf
          pop: true
        - match: '{{any}}'
          push: [arrayIncludeHelper]

  arrayIncludeHelper:
    - match: '(?={{varStarter}})'
      push: [spreadOptional, varSpec]
    - match: '{{any}}'
      push: [value]

# =====================================

  boolInclude:
    - meta_include_prototype: false
    - match: \b{{bool}}\b
      scope: constant.language.jlf
      pop: true

# =====================================

  nilInclude:
    - meta_include_prototype: false
    - match: \b{{nil}}\b
      scope: constant.language.jlf
      pop: true

# =============================================================================

  rangeValue:
    - match: '{{number}}'
      scope: constant.numeric.jlf
      set:
        - meta_include_prototype: false
        - include: rangeTailInclude
        - include: illegalInclude
    - match: '(?={{varStarter}})'
      set: [rangeTailOptinal, varSpecChain]
    - match: '(?={{beginOfExpr}})'
      set: [rangeTailOptinal, expr]
    - include: illegalInclude

  rangeTailOptinal:
    - meta_include_prototype: false
    - include: rangeTailInclude
    - match: '{{any}}'
      pop: true

  rangeTailInclude:
    - match: '{{rangeSeparator}}'
      scope: keyword.jlf
      set:
        - meta_include_prototype: false
        - match: '{{spaceAfter}}'
          pop: true
        - match: '{{any}}'
          set: numberValue

# =============================================================================

  numberValue:
    - include: commonValueInclude
    - include: numberInclude
    - include: illegalInclude

  numberInclude:
    - match: '{{number}}'
      scope: constant.numeric.jlf
      pop: true

# =============================================================================

  commonValueInclude:
    - meta_include_prototype: false
    - include: varSpecChainInclude
    - include: exprInclude

# =============================================================================

  stringsInclude:
    - match: '{{beginOfArray}}'
      scope: punctuation.section.block.begin.jlf
      set:
        - match: '{{endOfArray}}'
          scope: punctuation.section.block.end.jlf
          pop: true
        - match: '{{any}}'
          push: [ commaSeparatorOptional, stringValue ]
    - include: stringInclude

  stringsValue:
    - include: commonValueInclude
    - include: stringsInclude
    - include: illegalInclude

# =============================================================================

  defValue:
    - include: commonValueInclude
    - match: '{{any}}'
      set: [def, defStarterOptional]

  defStarterOptional:
    - match: '({{defStarter}})(?:({{colon}})(?=({{genType}}|defTypeMulti)))?'
      scope: comment.jlf
      pop: true
    - match: '{{any}}'
      pop: true

  defInclude:
    - meta_include_prototype: false
    - match: '({{defStarter}})(?:({{colon}})(?=({{genType}}|defTypeMulti)))?'
      scope: keyword.jlf
      set: def

  defWithStarter:
    - match: '(?={{defStarter}})'
      set:
        - include: defInclude
    - include: illegalInclude

  def:
    - meta_include_prototype: false
    - include: defAtomInclude
    - match: '{{beginOfArray}}'
      scope: punctuation.section.block.begin.jlf
      set:
        - match: '{{endOfArray}}'
          pop: true
        - match: '{{any}}'
          push: [ commaSeparatorOptional, defAtom ]
    - include: illegalInclude

  defAtom:
    - include: defAtomInclude
    - include: illegalInclude

  defAtomInclude:
    - match: '\bFunc\b'
      scope: variable.parameter.jlf
      set: [ defValue, retPrefix, varDefArgsOptional]
    - match: '({{defTypeSingleComplex}}|defTypeMulti)'
      scope: variable.parameter.jlf
      set:
        - meta_include_prototype: false
        - match: '{{beginOfMap}}'
          scope: punctuation.section.block.begin.jlf
          set: keyOfDef
        - match: '{{any}}'
          pop: true
    - match: '{{defTypeSingleSimple}}'
      scope: variable.parameter.jlf
      pop: true
    - match: '{{beginOfMap}}'
      scope: punctuation.section.block.begin.jlf
      set: keyOfDef

  retPrefix:
    - match: '->'
      scope: keyword.jlf
      pop: true
    - match: illegalInclude

  keyOfDef:
    - match: '{{endOfMap}}'
      scope: punctuation.section.block.end.jlf
      pop: true
    - match: \btype\b
      scope: keyword.jlf
      push: [commaSeparatorOptional, defTypeValue, keySeparatorOptional]
    - match: \bkeysDef\b
      scope: keyword.jlf
      push: [commaSeparatorOptional, keysDefValue, keySeparatorOptional]
    - match: \b(enum|keys)\b
      scope: keyword.jlf
      push: [commaSeparatorOptional, stringsValue, keySeparatorOptional]
    - match: \b(elemDef|arrayElemDef)\b
      scope: keyword.jlf
      push: [commaSeparatorOptional, defValue, keySeparatorOptional]
    - match: \brange\b
      scope: keyword.jlf
      push: [commaSeparatorOptional, rangeValue, keySeparatorOptional]
    - match: \bisOptional\b
      scope: keyword.jlf
      push: [commaSeparatorOptional, boolValue, keySeparatorOptional]
    - match: \bdefault\b
      scope: keyword.jlf
      push: [commaSeparatorOptional, value, keySeparatorOptional]
    - match: \barg\b
      scope: keyword.jlf
      push: [commaSeparatorOptional, varDefArgsValue, keySeparatorOptional]
    - match: \bret\b
      scope: keyword.jlf
      push: [commaSeparatorOptional, defValue, keySeparatorOptional]
    - include: illegalInclude

  defTypeValue:
    - match: '{{defStarter}}'
      scope: comment.jlf
      set:
        - meta_include_prototype: false
        - include: defTypeInclude
        - include: illegalInclude
    - include: defTypeInclude
    - include: illegalInclude

  defTypeInclude:
    - match: \b{{defTypeSingle}}\b
      scope: variable.parameter.jlf
      pop: true
    - match: '{{beginOfArray}}'
      scope: punctuation.section.block.begin.jlf
      set:
        - match: '{{endOfArray}}'
          pop: true
        - match: \b{{defTypeMulti}}|{{defTypeSingle}}\b
          scope: variable.parameter
        - include: illegalInclude

# =============================================================================

  keysDefInclude:
    - match: '{{keysDef}}(?={{beginOfMap}})'
      scope: keyword.jlf
      set: keysDefValueInclude

  keysDefValueInclude:
    - match: '({{keysDef}})?({{beginOfMap}})'
      captures:
        1: comment.jlf
        2: punctuation.section.block.begin.jlf
      set:
        - match: '{{endOfMap}}'
          scope: punctuation.section.block.end.jlf
          pop: true
        - include: mapEndInclude
        - match: '(?={{beginOfNonQuotedString}}|{{quotedStringDelimiter}}|{{regexpStringDelimiter}}|{{beginOfArray}})'
          push: [commaSeparatorOptional, defValue, keySeparatorOptional, optionalKeyEnder, keysDefKeyAsStringsOrRegexp]
        - match: '(?={{varStarter}}|{{beginOfExpr}})'
          push: [commaSeparatorOptional, keysDefSpreadOptional, commonValue]
        - include: illegalInclude

  keysDefValue:
    - include: commonValueInclude
    - include: keysDefValueInclude
    - include: illegalInclude

  keysDefKeyAsStringsOrRegexp:
    - meta_include_prototype: false
    - include: keyRegexpInclude
    # - include: stringsInclude
    - match: '{{beginOfArray}}'
      scope: punctuation.section.block.begin.jlf
      set:
        - match: '{{endOfArray}}'
          scope: punctuation.section.block.end.jlf
          pop: true
        - match: '{{any}}'
          push: [ commaSeparatorOptional, stringValue ]
    - include: keyInclude
    - include: illegalInclude

  keysDefSpreadOptional:
    - meta_include_prototype: false
    - match: '{{spreadOp}}'
      scope: keyword.jlf
      pop: true
    - match: '{{any}}'
      set: [defValue, keySeparatorOptional, optionalKeyEnder]

  commonValue:
    - meta_include_prototype: false
    - include: varSpecChainInclude
    - include: exprInclude
    - include: illegalInclude

# =============================================================================

  optionalKeyEnder:
    - meta_include_prototype: false
    - match: '({{optionalEnder}}|{{mustEnder}})'
      scope: keyword.jlf
      pop: true
    - match: '{{any}}'
      pop: true

# =============================================================================

  boolValue:
    - include: commonValueInclude
    - include: boolInclude
    - include: illegalInclude

# =============================================================================

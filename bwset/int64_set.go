// Code generated by "bwsetter -type=int64"; DO NOT EDIT; bwsetter: go get -type=int64 -set=Int64 -test%!(EXTRA string=github.com/baza-winner/bwcore/bwsetter)

package bwset

import (
	"encoding/json"
	"sort"
	"strconv"
)

// Int64 - множество значений типа int64 с поддержкой интерфейсов Stringer и MarshalJSON
type Int64 map[int64]struct{}

// Int64From - конструктор Int64
func Int64From(kk ...int64) Int64 {
	result := Int64{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// Int64FromSlice - конструктор Int64
func Int64FromSlice(kk []int64) Int64 {
	result := Int64{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// Int64FromSet - конструктор Int64
func Int64FromSet(s Int64) Int64 {
	result := Int64{}
	for k, _ := range s {
		result[k] = struct{}{}
	}
	return result
}

// Copy - создает независимую копию
func (v Int64) Copy() Int64 {
	return Int64FromSet(v)
}

// ToSlice - возвращает в виде []int64
func (v Int64) ToSlice() []int64 {
	result := _int64Slice{}
	for k, _ := range v {
		result = append(result, k)
	}
	sort.Sort(result)
	return result
}

func _Int64ToSliceTestHelper(kk []int64) []int64 {
	return Int64FromSlice(kk).ToSlice()
}

// String - поддержка интерфейса Stringer
func (v Int64) String() string {
	result, _ := json.Marshal(v)
	return string(result)
}

// MarshalJSON - поддержка интерфейса MarshalJSON
func (v Int64) MarshalJSON() ([]byte, error) {
	result := []interface{}{}
	for _, k := range v.ToSlice() {
		result = append(result, k)
	}
	return json.Marshal(result)
}

// ToSliceOfStrings - возвращает []string строковых представлений элементов множества
func (v Int64) ToSliceOfStrings() []string {
	result := []string{}
	for k, _ := range v {
		result = append(result, strconv.FormatInt(int64(k), 10))
	}
	sort.Strings(result)
	return result
}

// Has - возвращает true, если множество содержит заданный элемент, в противном случае - false
func (v Int64) Has(k int64) bool {
	_, ok := v[k]
	return ok
}

/*
HasAny - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v Int64) HasAny(kk ...int64) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSlice - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v Int64) HasAnyOfSlice(kk []int64) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSet - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v Int64) HasAnyOfSet(s Int64) bool {
	for k, _ := range s {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasEach - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v Int64) HasEach(kk ...int64) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSlice - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v Int64) HasEachOfSlice(kk []int64) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSet - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v Int64) HasEachOfSet(s Int64) bool {
	for k, _ := range s {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

// Add - добавляет элементы в множество v
func (v Int64) Add(kk ...int64) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

func (v Int64) _AddTestHelper(kk ...int64) Int64 {
	result := v.Copy()
	result.Add(kk...)
	return result
}

// AddSlice - добавляет элементы в множество v
func (v Int64) AddSlice(kk []int64) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

func (v Int64) _AddSliceTestHelper(kk []int64) Int64 {
	result := v.Copy()
	result.AddSlice(kk)
	return result
}

// AddSet - добавляет элементы в множество v
func (v Int64) AddSet(s Int64) {
	for k, _ := range s {
		v[k] = struct{}{}
	}
}

func (v Int64) _AddSetTestHelper(s Int64) Int64 {
	result := v.Copy()
	result.AddSet(s)
	return result
}

// Del - удаляет элементы из множествa v
func (v Int64) Del(kk ...int64) {
	for _, k := range kk {
		delete(v, k)
	}
}

func (v Int64) _DelTestHelper(kk ...int64) Int64 {
	result := v.Copy()
	result.Del(kk...)
	return result
}

// DelSlice - удаляет элементы из множествa v
func (v Int64) DelSlice(kk []int64) {
	for _, k := range kk {
		delete(v, k)
	}
}

func (v Int64) _DelSliceTestHelper(kk []int64) Int64 {
	result := v.Copy()
	result.DelSlice(kk)
	return result
}

// DelSet - удаляет элементы из множествa v
func (v Int64) DelSet(s Int64) {
	for k, _ := range s {
		delete(v, k)
	}
}

func (v Int64) _DelSetTestHelper(s Int64) Int64 {
	result := v.Copy()
	result.DelSet(s)
	return result
}

// Union - возвращает результат объединения двух множеств. Исходные множества остаются без изменений
func (v Int64) Union(s Int64) Int64 {
	result := v.Copy()
	result.AddSet(s)
	return result
}

// Intersect - возвращает результат пересечения двух множеств. Исходные множества остаются без изменений
func (v Int64) Intersect(s Int64) Int64 {
	result := Int64{}
	for k, _ := range v {
		if _, ok := s[k]; ok {
			result[k] = struct{}{}
		}
	}
	return result
}

// Subtract - возвращает результат вычитания двух множеств. Исходные множества остаются без изменений
func (v Int64) Subtract(s Int64) Int64 {
	result := Int64{}
	for k, _ := range v {
		if _, ok := s[k]; !ok {
			result[k] = struct{}{}
		}
	}
	return result
}

type _int64Slice []int64

func (v _int64Slice) Len() int {
	return len(v)
}

func (v _int64Slice) Swap(i int, j int) {
	v[i], v[j] = v[j], v[i]
}

func (v _int64Slice) Less(i int, j int) bool {
	return v[i] < v[j]
}

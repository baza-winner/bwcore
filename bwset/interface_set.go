// Code generated by "bwsetter -type=interface{}"; DO NOT EDIT; bwsetter: go get -type=interface{} -set=Interface -test -nosort%!(EXTRA string=github.com/baza-winner/bwcore/bwsetter)

package bwset

import (
	"encoding/json"
	bwjson "github.com/baza-winner/bwcore/bwjson"
	"sort"
)

// Interface - множество значений типа interface{} с поддержкой интерфейсов Stringer и MarshalJSON
type Interface map[interface{}]struct{}

// InterfaceFrom - конструктор Interface
func InterfaceFrom(kk ...interface{}) Interface {
	result := Interface{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// InterfaceFromSlice - конструктор Interface
func InterfaceFromSlice(kk []interface{}) Interface {
	result := Interface{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// InterfaceFromSet - конструктор Interface
func InterfaceFromSet(s Interface) Interface {
	result := Interface{}
	for k, _ := range s {
		result[k] = struct{}{}
	}
	return result
}

// Copy - создает независимую копию
func (v Interface) Copy() Interface {
	return InterfaceFromSet(v)
}

// ToSlice - возвращает в виде []interface{}
func (v Interface) ToSlice() []interface{} {
	result := []interface{}{}
	for k, _ := range v {
		result = append(result, k)
	}
	return result
}

// String - поддержка интерфейса Stringer
func (v Interface) String() string {
	result, _ := json.Marshal(v)
	return string(result)
}

// MarshalJSON - поддержка интерфейса MarshalJSON
func (v Interface) MarshalJSON() ([]byte, error) {
	result := []interface{}{}
	for _, k := range v.ToSlice() {
		result = append(result, k)
	}
	return json.Marshal(result)
}

// ToSliceOfStrings - возвращает []string строковых представлений элементов множества
func (v Interface) ToSliceOfStrings() []string {
	result := []string{}
	for k, _ := range v {
		result = append(result, bwjson.Pretty(k))
	}
	sort.Strings(result)
	return result
}

// Has - возвращает true, если множество содержит заданный элемент, в противном случае - false
func (v Interface) Has(k interface{}) bool {
	_, ok := v[k]
	return ok
}

/*
HasAny - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v Interface) HasAny(kk ...interface{}) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSlice - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v Interface) HasAnyOfSlice(kk []interface{}) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSet - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v Interface) HasAnyOfSet(s Interface) bool {
	for k, _ := range s {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasEach - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v Interface) HasEach(kk ...interface{}) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSlice - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v Interface) HasEachOfSlice(kk []interface{}) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSet - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v Interface) HasEachOfSet(s Interface) bool {
	for k, _ := range s {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

// Add - добавляет элементы в множество v
func (v Interface) Add(kk ...interface{}) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

func (v Interface) _AddTestHelper(kk ...interface{}) Interface {
	result := v.Copy()
	result.Add(kk...)
	return result
}

// AddSlice - добавляет элементы в множество v
func (v Interface) AddSlice(kk []interface{}) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

func (v Interface) _AddSliceTestHelper(kk []interface{}) Interface {
	result := v.Copy()
	result.AddSlice(kk)
	return result
}

// AddSet - добавляет элементы в множество v
func (v Interface) AddSet(s Interface) {
	for k, _ := range s {
		v[k] = struct{}{}
	}
}

func (v Interface) _AddSetTestHelper(s Interface) Interface {
	result := v.Copy()
	result.AddSet(s)
	return result
}

// Del - удаляет элементы из множествa v
func (v Interface) Del(kk ...interface{}) {
	for _, k := range kk {
		delete(v, k)
	}
}

func (v Interface) _DelTestHelper(kk ...interface{}) Interface {
	result := v.Copy()
	result.Del(kk...)
	return result
}

// DelSlice - удаляет элементы из множествa v
func (v Interface) DelSlice(kk []interface{}) {
	for _, k := range kk {
		delete(v, k)
	}
}

func (v Interface) _DelSliceTestHelper(kk []interface{}) Interface {
	result := v.Copy()
	result.DelSlice(kk)
	return result
}

// DelSet - удаляет элементы из множествa v
func (v Interface) DelSet(s Interface) {
	for k, _ := range s {
		delete(v, k)
	}
}

func (v Interface) _DelSetTestHelper(s Interface) Interface {
	result := v.Copy()
	result.DelSet(s)
	return result
}

// Union - возвращает результат объединения двух множеств. Исходные множества остаются без изменений
func (v Interface) Union(s Interface) Interface {
	result := v.Copy()
	result.AddSet(s)
	return result
}

// Intersect - возвращает результат пересечения двух множеств. Исходные множества остаются без изменений
func (v Interface) Intersect(s Interface) Interface {
	result := Interface{}
	for k, _ := range v {
		if _, ok := s[k]; ok {
			result[k] = struct{}{}
		}
	}
	return result
}

// Subtract - возвращает результат вычитания двух множеств. Исходные множества остаются без изменений
func (v Interface) Subtract(s Interface) Interface {
	result := Interface{}
	for k, _ := range v {
		if _, ok := s[k]; !ok {
			result[k] = struct{}{}
		}
	}
	return result
}

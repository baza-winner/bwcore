// Code generated by "bwsetter -type=int8"; DO NOT EDIT; bwsetter: go get -type=int8 -set=Int8 -test%!(EXTRA string=github.com/baza-winner/bwcore/bwsetter)

package bwset

import (
	"encoding/json"
	bwtesting "github.com/baza-winner/bwcore/bwtesting"
	"strconv"
	"testing"
)

func TestInt8(t *testing.T) {
	bwtesting.BwRunTests(t, Int8From, map[string]bwtesting.Case{"Int8From": {
		In: []interface{}{_Int8TestItemA, _Int8TestItemB},
		Out: []interface{}{Int8{
			_Int8TestItemA: struct{}{},
			_Int8TestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int8FromSlice, map[string]bwtesting.Case{"Int8FromSlice": {
		In: []interface{}{[]int8{_Int8TestItemA, _Int8TestItemB}},
		Out: []interface{}{Int8{
			_Int8TestItemA: struct{}{},
			_Int8TestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int8FromSet, map[string]bwtesting.Case{"Int8FromSet": {
		In: []interface{}{Int8{
			_Int8TestItemA: struct{}{},
			_Int8TestItemB: struct{}{},
		}},
		Out: []interface{}{Int8{
			_Int8TestItemA: struct{}{},
			_Int8TestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int8.Copy, map[string]bwtesting.Case{"Int8.Copy": {
		In: []interface{}{Int8{
			_Int8TestItemA: struct{}{},
			_Int8TestItemB: struct{}{},
		}},
		Out: []interface{}{Int8{
			_Int8TestItemA: struct{}{},
			_Int8TestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int8.ToSlice, map[string]bwtesting.Case{"Int8.ToSlice": {
		In:  []interface{}{Int8{_Int8TestItemA: struct{}{}}},
		Out: []interface{}{[]int8{_Int8TestItemA}},
	}})
	bwtesting.BwRunTests(t, _Int8ToSliceTestHelper, map[string]bwtesting.Case{"_Int8ToSliceTestHelper": {
		In:  []interface{}{[]int8{_Int8TestItemB, _Int8TestItemA}},
		Out: []interface{}{[]int8{_Int8TestItemA, _Int8TestItemB}},
	}})
	bwtesting.BwRunTests(t, Int8.String, map[string]bwtesting.Case{"Int8.String": {
		In: []interface{}{Int8{_Int8TestItemA: struct{}{}}},
		Out: []interface{}{func() string {
			result, _ := json.Marshal(_Int8TestItemA)
			return "[" + string(result) + "]"
		}()},
	}})
	bwtesting.BwRunTests(t, Int8.MarshalJSON, map[string]bwtesting.Case{"Int8.MarshalJSON": {
		In: []interface{}{Int8{_Int8TestItemA: struct{}{}}},
		Out: []interface{}{(func() []byte {
			result, _ := json.Marshal([]interface{}{_Int8TestItemA})
			return result
		})(), nil},
	}})
	bwtesting.BwRunTests(t, Int8.ToSliceOfStrings, map[string]bwtesting.Case{"Int8.ToSliceOfStrings": {
		In:  []interface{}{Int8{_Int8TestItemA: struct{}{}}},
		Out: []interface{}{[]string{strconv.FormatInt(int64(_Int8TestItemA), 10)}},
	}})
	bwtesting.BwRunTests(t, Int8.Has, map[string]bwtesting.Case{
		"Int8.Has: false": {
			In:  []interface{}{Int8{_Int8TestItemA: struct{}{}}, _Int8TestItemB},
			Out: []interface{}{false},
		},
		"Int8.Has: true": {
			In:  []interface{}{Int8{_Int8TestItemA: struct{}{}}, _Int8TestItemA},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int8.HasAny, map[string]bwtesting.Case{
		"Int8.HasAny: empty": {
			In:  []interface{}{Int8{_Int8TestItemA: struct{}{}}},
			Out: []interface{}{false},
		},
		"Int8.HasAny: false": {
			In:  []interface{}{Int8{_Int8TestItemA: struct{}{}}, _Int8TestItemB},
			Out: []interface{}{false},
		},
		"Int8.HasAny: true": {
			In:  []interface{}{Int8{_Int8TestItemA: struct{}{}}, _Int8TestItemA, _Int8TestItemB},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int8.HasAnyOfSlice, map[string]bwtesting.Case{
		"Int8.HasAnyOfSlice: empty": {
			In:  []interface{}{Int8{_Int8TestItemA: struct{}{}}, []int8{}},
			Out: []interface{}{false},
		},
		"Int8.HasAnyOfSlice: false": {
			In:  []interface{}{Int8{_Int8TestItemA: struct{}{}}, []int8{_Int8TestItemB}},
			Out: []interface{}{false},
		},
		"Int8.HasAnyOfSlice: true": {
			In:  []interface{}{Int8{_Int8TestItemA: struct{}{}}, []int8{_Int8TestItemA, _Int8TestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int8.HasAnyOfSet, map[string]bwtesting.Case{
		"Int8.HasAnyOfSet: empty": {
			In:  []interface{}{Int8{_Int8TestItemA: struct{}{}}, Int8{}},
			Out: []interface{}{false},
		},
		"Int8.HasAnyOfSet: false": {
			In:  []interface{}{Int8{_Int8TestItemA: struct{}{}}, Int8{_Int8TestItemB: struct{}{}}},
			Out: []interface{}{false},
		},
		"Int8.HasAnyOfSet: true": {
			In: []interface{}{Int8{_Int8TestItemA: struct{}{}}, Int8{
				_Int8TestItemA: struct{}{},
				_Int8TestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int8.HasEach, map[string]bwtesting.Case{
		"Int8.HasEach: empty": {
			In:  []interface{}{Int8{_Int8TestItemA: struct{}{}}},
			Out: []interface{}{true},
		},
		"Int8.HasEach: false": {
			In:  []interface{}{Int8{_Int8TestItemA: struct{}{}}, _Int8TestItemA, _Int8TestItemB},
			Out: []interface{}{false},
		},
		"Int8.HasEach: true": {
			In: []interface{}{Int8{
				_Int8TestItemA: struct{}{},
				_Int8TestItemB: struct{}{},
			}, _Int8TestItemA, _Int8TestItemB},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int8.HasEachOfSlice, map[string]bwtesting.Case{
		"Int8.HasEachOfSlice: empty": {
			In:  []interface{}{Int8{_Int8TestItemA: struct{}{}}, []int8{}},
			Out: []interface{}{true},
		},
		"Int8.HasEachOfSlice: false": {
			In:  []interface{}{Int8{_Int8TestItemA: struct{}{}}, []int8{_Int8TestItemA, _Int8TestItemB}},
			Out: []interface{}{false},
		},
		"Int8.HasEachOfSlice: true": {
			In: []interface{}{Int8{
				_Int8TestItemA: struct{}{},
				_Int8TestItemB: struct{}{},
			}, []int8{_Int8TestItemA, _Int8TestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int8.HasEachOfSet, map[string]bwtesting.Case{
		"Int8.HasEachOfSet: empty": {
			In:  []interface{}{Int8{_Int8TestItemA: struct{}{}}, Int8{}},
			Out: []interface{}{true},
		},
		"Int8.HasEachOfSet: false": {
			In: []interface{}{Int8{_Int8TestItemA: struct{}{}}, Int8{
				_Int8TestItemA: struct{}{},
				_Int8TestItemB: struct{}{},
			}},
			Out: []interface{}{false},
		},
		"Int8.HasEachOfSet: true": {
			In: []interface{}{Int8{
				_Int8TestItemA: struct{}{},
				_Int8TestItemB: struct{}{},
			}, Int8{
				_Int8TestItemA: struct{}{},
				_Int8TestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int8._AddTestHelper, map[string]bwtesting.Case{"Int8.Add": {
		In: []interface{}{Int8{_Int8TestItemA: struct{}{}}, _Int8TestItemB},
		Out: []interface{}{Int8{
			_Int8TestItemA: struct{}{},
			_Int8TestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int8._AddSliceTestHelper, map[string]bwtesting.Case{"Int8.AddSlice": {
		In: []interface{}{Int8{_Int8TestItemA: struct{}{}}, []int8{_Int8TestItemB}},
		Out: []interface{}{Int8{
			_Int8TestItemA: struct{}{},
			_Int8TestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int8._AddSetTestHelper, map[string]bwtesting.Case{"Int8.AddSet": {
		In: []interface{}{Int8{_Int8TestItemA: struct{}{}}, Int8{_Int8TestItemB: struct{}{}}},
		Out: []interface{}{Int8{
			_Int8TestItemA: struct{}{},
			_Int8TestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int8._DelTestHelper, map[string]bwtesting.Case{"Int8.Del": {
		In: []interface{}{Int8{
			_Int8TestItemA: struct{}{},
			_Int8TestItemB: struct{}{},
		}, _Int8TestItemB},
		Out: []interface{}{Int8{_Int8TestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Int8._DelSliceTestHelper, map[string]bwtesting.Case{"Int8.DelSlice": {
		In: []interface{}{Int8{
			_Int8TestItemA: struct{}{},
			_Int8TestItemB: struct{}{},
		}, []int8{_Int8TestItemB}},
		Out: []interface{}{Int8{_Int8TestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Int8._DelSetTestHelper, map[string]bwtesting.Case{"Int8.DelSet": {
		In: []interface{}{Int8{
			_Int8TestItemA: struct{}{},
			_Int8TestItemB: struct{}{},
		}, Int8{_Int8TestItemB: struct{}{}}},
		Out: []interface{}{Int8{_Int8TestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Int8.Union, map[string]bwtesting.Case{"Int8.Union": {
		In: []interface{}{Int8{_Int8TestItemA: struct{}{}}, Int8{_Int8TestItemB: struct{}{}}},
		Out: []interface{}{Int8{
			_Int8TestItemA: struct{}{},
			_Int8TestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int8.Intersect, map[string]bwtesting.Case{"Int8.Intersect": {
		In: []interface{}{Int8{
			_Int8TestItemA: struct{}{},
			_Int8TestItemB: struct{}{},
		}, Int8{_Int8TestItemB: struct{}{}}},
		Out: []interface{}{Int8{_Int8TestItemB: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Int8.Subtract, map[string]bwtesting.Case{"Int8.Subtract": {
		In: []interface{}{Int8{
			_Int8TestItemA: struct{}{},
			_Int8TestItemB: struct{}{},
		}, Int8{_Int8TestItemB: struct{}{}}},
		Out: []interface{}{Int8{_Int8TestItemA: struct{}{}}},
	}})
}

// Code generated by "bwsetter -type=bool"; DO NOT EDIT; bwsetter: go get -type=bool -set=Bool -test -nosort%!(EXTRA string=github.com/baza-winner/bwcore/bwsetter)

package bwset

import (
	"encoding/json"
	"sort"
	"strconv"
)

// Bool - множество значений типа bool с поддержкой интерфейсов Stringer и MarshalJSON
type Bool map[bool]struct{}

// BoolFrom - конструктор Bool
func BoolFrom(kk ...bool) Bool {
	result := Bool{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// BoolFromSlice - конструктор Bool
func BoolFromSlice(kk []bool) Bool {
	result := Bool{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// BoolFromSet - конструктор Bool
func BoolFromSet(s Bool) Bool {
	result := Bool{}
	for k, _ := range s {
		result[k] = struct{}{}
	}
	return result
}

// Copy - создает независимую копию
func (v Bool) Copy() Bool {
	return BoolFromSet(v)
}

// ToSlice - возвращает в виде []bool
func (v Bool) ToSlice() []bool {
	result := []bool{}
	for k, _ := range v {
		result = append(result, k)
	}
	return result
}

// String - поддержка интерфейса Stringer
func (v Bool) String() string {
	result, _ := json.Marshal(v)
	return string(result)
}

// MarshalJSON - поддержка интерфейса MarshalJSON
func (v Bool) MarshalJSON() ([]byte, error) {
	result := []interface{}{}
	for _, k := range v.ToSlice() {
		result = append(result, k)
	}
	return json.Marshal(result)
}

// ToSliceOfStrings - возвращает []string строковых представлений элементов множества
func (v Bool) ToSliceOfStrings() []string {
	result := []string{}
	for k, _ := range v {
		result = append(result, strconv.FormatBool(k))
	}
	sort.Strings(result)
	return result
}

// Has - возвращает true, если множество содержит заданный элемент, в противном случае - false
func (v Bool) Has(k bool) bool {
	_, ok := v[k]
	return ok
}

/*
HasAny - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v Bool) HasAny(kk ...bool) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSlice - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v Bool) HasAnyOfSlice(kk []bool) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSet - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v Bool) HasAnyOfSet(s Bool) bool {
	for k, _ := range s {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasEach - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v Bool) HasEach(kk ...bool) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSlice - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v Bool) HasEachOfSlice(kk []bool) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSet - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v Bool) HasEachOfSet(s Bool) bool {
	for k, _ := range s {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

// Add - добавляет элементы в множество v
func (v Bool) Add(kk ...bool) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

func (v Bool) _AddTestHelper(kk ...bool) Bool {
	result := v.Copy()
	result.Add(kk...)
	return result
}

// AddSlice - добавляет элементы в множество v
func (v Bool) AddSlice(kk []bool) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

func (v Bool) _AddSliceTestHelper(kk []bool) Bool {
	result := v.Copy()
	result.AddSlice(kk)
	return result
}

// AddSet - добавляет элементы в множество v
func (v Bool) AddSet(s Bool) {
	for k, _ := range s {
		v[k] = struct{}{}
	}
}

func (v Bool) _AddSetTestHelper(s Bool) Bool {
	result := v.Copy()
	result.AddSet(s)
	return result
}

// Del - удаляет элементы из множествa v
func (v Bool) Del(kk ...bool) {
	for _, k := range kk {
		delete(v, k)
	}
}

func (v Bool) _DelTestHelper(kk ...bool) Bool {
	result := v.Copy()
	result.Del(kk...)
	return result
}

// DelSlice - удаляет элементы из множествa v
func (v Bool) DelSlice(kk []bool) {
	for _, k := range kk {
		delete(v, k)
	}
}

func (v Bool) _DelSliceTestHelper(kk []bool) Bool {
	result := v.Copy()
	result.DelSlice(kk)
	return result
}

// DelSet - удаляет элементы из множествa v
func (v Bool) DelSet(s Bool) {
	for k, _ := range s {
		delete(v, k)
	}
}

func (v Bool) _DelSetTestHelper(s Bool) Bool {
	result := v.Copy()
	result.DelSet(s)
	return result
}

// Union - возвращает результат объединения двух множеств. Исходные множества остаются без изменений
func (v Bool) Union(s Bool) Bool {
	result := v.Copy()
	result.AddSet(s)
	return result
}

// Intersect - возвращает результат пересечения двух множеств. Исходные множества остаются без изменений
func (v Bool) Intersect(s Bool) Bool {
	result := Bool{}
	for k, _ := range v {
		if _, ok := s[k]; ok {
			result[k] = struct{}{}
		}
	}
	return result
}

// Subtract - возвращает результат вычитания двух множеств. Исходные множества остаются без изменений
func (v Bool) Subtract(s Bool) Bool {
	result := Bool{}
	for k, _ := range v {
		if _, ok := s[k]; !ok {
			result[k] = struct{}{}
		}
	}
	return result
}
